:PROPERTIES:
:ID:       d3309005-8d35-4421-8f3d-60ab14e1f2eb
:LAST_MODIFIED: [2023-03-07 Tue 15:49]
:END:
#+title: Dijkstra's algorithm implementation in Python
#+hugo_custom_front_matter: :slug "d3309005-8d35-4421-8f3d-60ab14e1f2eb"
#+author: Cash Prokop-Weaver
#+date: [2022-12-21 Wed 12:19]
#+filetags: :concept:

An [[id:ef37e8fc-651f-4577-8a68-3bdb0c919928][Implementation]] of [[id:668cbbcc-170b-42c8-b92b-75f6868a0138][Dijkstra's algorithm]] in [[id:27b0e33a-6754-40b8-99d8-46650e8626aa][Python]].

#+begin_src python :results output
import math
from typing ipmort List, TypeVar, Generic
from dataclasses import dataclass, field
from itertools import count

T = TypeVar('T')

@dataclass
class Node(Generic[T]):
    value: T
    # [<node id>, <edge weight>]
    neighbors: List[Tuple[Node, int]]
    id: int = field(default_factory=count().__next__)

def dijkstra(nodes: Mapping[int, Node], edge_weights: Mapping[str, int], source_node: Node, target_node = None) -> Tuple[Mapping[int, int], Mapping[int, Node]]:
    """Find the shortest path from SOURCE_NODE to all other nodes in NODES by Dijkstra's.

    Note that EDGE_WEIGHTS is in the form of:
      { "<node1.id>-<node2.id>": <weight>, ... }

    Return:
      1. Map of node ids to their overall distance
      2. Map of node ids to their previous nodes
    """

    distances = {}
    previouses = {}
    visited = set()
    min_queue = FibonacciHeap()

    for _, node in nodes:
        distances[node.id] = math.inf
        previouses[node.id] = None
        min_queue.add(node, distances[node.id])
    distances[source_node.id] = 0
    min_queue.update_priority(source_node.id, 0)

    while min_queue:
        current_node = nodes[min_queue.pop()]
        visited.add(current_node.id)

        for neighbor_id, edge_weight in [neighbor_id, edge_weight in current_node.neighbors if neighbor_id not in visited]:
            distance = distances[current_node.id] + edge_weight
            if distance < distances[neighbor_id]:
                distances[neighbor_id] = distance
                previouses[neighbor_id] = current_node.id
                min_queue.update_priority(neighbor_id, distance)

    return distances, previouses
#+end_src

* Flashcards
** Implement :fc:implement:
:PROPERTIES:
:CREATED: [2022-12-21 Wed 12:19]
:FC_CREATED: 2022-12-21T20:20:16Z
:FC_TYPE:  normal
:ID:       0e0e3ebf-4d1e-43a1-bbf9-ff5bf274b83e
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.80 |   4 |    15.82 | 2023-02-05T12:20:12Z |
:END:

Implement [[id:668cbbcc-170b-42c8-b92b-75f6868a0138][Dijkstra's algorithm]] in [[id:27b0e33a-6754-40b8-99d8-46650e8626aa][Python]] to solve the [[id:477fb65f-3351-4154-a270-08c58cdcaf88][Single-pair shortest path problem]]

*** Back
[[id:d3309005-8d35-4421-8f3d-60ab14e1f2eb][Dijkstra's algorithm implementation in Python]]
*** Source
** Implement :fc:implement:
:PROPERTIES:
:CREATED: [2022-12-21 Wed 12:19]
:FC_CREATED: 2022-12-21T20:20:16Z
:FC_TYPE:  normal
:ID:       c6821c57-cfdf-49a8-b981-820c75c94373
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.80 |   4 |    17.05 | 2023-02-17T15:27:42Z |
:END:

Implement [[id:668cbbcc-170b-42c8-b92b-75f6868a0138][Dijkstra's algorithm]] in [[id:27b0e33a-6754-40b8-99d8-46650e8626aa][Python]] to solve the [[id:9d301c65-05c3-44f8-9660-90e0e963e6aa][Single-source shortest path problem]]
*** Back
[[id:d3309005-8d35-4421-8f3d-60ab14e1f2eb][Dijkstra's algorithm implementation in Python]]
*** Source
