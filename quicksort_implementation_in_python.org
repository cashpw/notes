:PROPERTIES:
:ID:       ed982b37-6f8e-4b89-bb51-ac608510325e
:LAST_MODIFIED: [2024-02-09 Fri 06:33]
:END:
#+title: Quicksort implementation in Python
#+hugo_custom_front_matter: :slug "ed982b37-6f8e-4b89-bb51-ac608510325e"
#+author: Cash Prokop-Weaver
#+date: [2022-06-30 Thu 13:57]
#+filetags: :concept:

[[id:ef37e8fc-651f-4577-8a68-3bdb0c919928][Implementation]] of [[id:d7bcd831-6a3f-4885-a654-15f0b11c9966][Quicksort]] in [[id:27b0e33a-6754-40b8-99d8-46650e8626aa][Python]].

#+begin_src python :results output
from typing import List, Callable

def swap(ints: List[int], indexA: int, indexB: int) -> None:
    """Swap the values in INTS at INDEXA and INDEXB."""
    valueA = ints[indexA]
    ints[indexA] = ints[indexB]
    ints[indexB] = valueA

def partition(ints: List[int], comparator: Callable[[id:int, int], bool], low_index: int, high_index: int) -> int:
    """Sorts sublist into [{<= pivot}, pivot, {> than pivot}]"""

    pivot_index = high_index
    i = low_index - 1

    for j in range(low_index, high_index):
        if comparator(ints[j], ints[pivot_index]):
            i += 1
            swap(ints, i, j)
    i += 1
    swap(ints, i, pivot_index)

    return i

def quick_sort_inner(ints: List[int], comparator: Callable[[id:int, int], bool], low_index: int, high_index: int) -> List[int]:
    if low_index >= high_index or low_index < 0:
        return

    pivot_index = partition(ints, comparator, low_index, high_index)

    quick_sort_inner(ints, comparator, 0, pivot_index - 1)
    quick_sort_inner(ints, comparator, pivot_index + 1, high_index)

    return ints

def quick_sort(ints: List[int], comparator: Callable[[id:int, int], bool]) -> List[int]:
       return quick_sort_inner(ints, comparator, 0, len(ints) - 1)


a = [10, 15, 5, 8, 2, 1, 3, 9]
print(quick_sort(a, lambda a, b: a <= b))
#+end_src

* Flashcards :noexport:
** Implement :fc:implement:
:PROPERTIES:
:ID:       1cd3c833-4fdc-4107-b362-15a71577398e
:ANKI_NOTE_ID: 1656857297807
:FC_CREATED: 2022-07-03T14:08:17Z
:FC_TYPE:  normal
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.80 |   7 |   199.36 | 2023-12-28T01:49:39Z |
:END:

[[id:ed982b37-6f8e-4b89-bb51-ac608510325e][Quicksort implementation in Python]]

*** Back
[[id:ed982b37-6f8e-4b89-bb51-ac608510325e][Quicksort implementation in Python]]
*** Source
[cite:@Quicksort2022]
* Bibliography
#+print_bibliography:
