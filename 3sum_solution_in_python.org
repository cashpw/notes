:PROPERTIES:
:ID:       8940a6c3-151a-4bbd-8264-fc4cecd7ba5a
:LAST_MODIFIED: [2023-06-30 Fri 18:32]
:END:
#+title: 3sum solution in Python
#+hugo_custom_front_matter: :slug "8940a6c3-151a-4bbd-8264-fc4cecd7ba5a"
#+author: Cash Prokop-Weaver
#+date: [2023-02-07 Tue 16:26]
#+filetags: :concept:
#+begin_src python :results output
from typing import List, Optional, Mapping

def three_sum(numbers: List[float], target: float) -> Optional[List[float]]:
    """Return a subset of NUMBERS of length 3 which sum to TARGET if one exists; else None.

    Assumes that floats in NUMBERS can repeat."""

    # Mapping from float to the number of times we've seen that float
    previous_numbers: Mapping[float, int] = {}

    for i in range(len(numbers)):
        if numbers[i] in previous_numbers:
            previous_numbers[numbers[i]] += 1
        else:
            previous_numbers[numbers[i]] = 1

        for j in range(len(numbers)):
            if j == i:
                continue

            difference = target - (numbers[i] + numbers[j])
            if difference in previous_numbers:
                subset = set([numbers[i], numbers[j], difference])
                subset_as_list = [numbers[i], numbers[j], difference]

                if len(subset) == 3:
                    return subset_as_list

                if len(subset) == 2:
                    if numbers[i] == numbers[j] or previous_numbers[difference] > 1:
                        return subset_as_list

                if len(subset) == 1:
                    if previous_numbers[difference] > 2:
                        return subset_as_list

    return None

print(three_sum([2,3,4,5,6], 12), 'should be [2,4,6] or [3,4,5]')
print(three_sum([2,3,4,5,-6], 0), 'should be [2,4,-6]')
print(three_sum([2,3,4,2,2], 6), 'should be [2,2,2]')
print(three_sum([2,3,4,5,2], 6), 'should be None')
#+end_src

#+RESULTS:
: [4, 5, 3] should be [2,4,6] or [3,4,5]
: [4, -6, 2] should be [2,4,-6]
: [2, 2, 2] should be [2,2,2]
: None should be None

* Flashcards
** Solve :fc:implement:
:PROPERTIES:
:CREATED: [2023-02-07 Tue 16:27]
:FC_CREATED: 2023-02-08T00:28:14Z
:FC_TYPE:  normal
:ID:       6238808e-2445-47d5-a065-0f2e5ddb266e
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.35 |   4 |    15.39 | 2023-07-16T10:57:53Z |
:END:

Given a list of real numbers, =nums=, and a target value, =target=: return a list of three elements in =nums= which sum to =target=.

*** Back
[[id:8940a6c3-151a-4bbd-8264-fc4cecd7ba5a][3sum solution in Python]]
*** Source
[[id:8940a6c3-151a-4bbd-8264-fc4cecd7ba5a][3sum solution in Python]]
